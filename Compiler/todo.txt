

call graph 
	figure out if enough room next to node for label

	view
	   show scope of call graph, really need a splitter or seperate window to show both simultaneously
			mouse overs replicate over both views
	   show options - showing calls from outside of scope- (outside icon)
					  showing calls external to scope - (show external icon)
					  could label as calls to/from xrayed/non xrayed code

	A -> B, B -> A, temp node should be created so loop can be seen

	real-time mode, (show recently called) build graph based on current active nodes

	left docked view options wouldnt be bad, if tree/call shown simultaneously then splitter there
	right side docked is properties of whats clicked on, each have push pin hiding
	show all calls default in call graph

	reset timing - like reset hit option

	select node - highlight connected edges
	mouse over line - highlight, descriptive tool tip
	
	
stats
	re-calcs/sec,   re-calc time
	re-size/sec,  re-size time
	re-draw/sec, re-draw time
	ability in interface to speedup/slowdown update speed



----X-Ray
  if xrayed application detects ctrl alt x, current
    app gui is frozen, and xray for app fades over.
  do for silverlight app as well
    debug interfaces as you build them
    if function doesnt work, fix it in real time
      so next click doesnt call an exception, but does something.

  each piece of the app compiles independently
    the code is compiled as the program runs
      each step fleshing out the program

GOAL: USE X RAY TO BUILD AN ENTIRE APPLICATION WITHOUT CLOSING 
IT!!!  Debugging, error checking as new components added. 
Actual program never closed.
Taking out one component could cause a whole mesh of components 
to fail, but never the whole system, always a ROOT component to 
start from again.  add function, write in C#, compile and 
attach at runtime inside.  not called directly but wrapped 
around a component layer that pipes in/out variable 
input/outputs

root component is a loop always starting to try starting the 
first attached components.

the root component never stops.

interactive application can be built and never closed. a 
webserver or 'free' project where people can build components 
and attach.  links between components could even be over the 
network.

might already exist 'in functional' programming. but this is 
higher level.  the nucleus is procedural.  while the program 
build on procedural parts is acts functional.
-----


xray dll mode starts a mini http server embedded in dll
   serves div pages colered as blocks
   use javascript to click blocks zoom

  each dll has an embedded web server that when activated shows
    whats going on in system

  if running as http then can go into xray mode at will, release with
    xray inside and debug on demand, use a browser on any machine to
    debug your app. go to the xray port
    every second each http listening xray object pings the main port
       takes it if available, serves as a directory for other xray
       apps


>-------
IF ALL APPS/DLLS xrayed on system, can view 'insides' of any running process at any time. 

 when not viewed - full speed, when viewed - html page updtating - 

http://127.0.0.1:34234:XRay/c/program files/myapp.dll

entry function checks if xray server up, if not inits it, if entry function already has a 
version then create a new one
xray server can be queried for all active running xray instances on the system

xray instances themselves can be check by xraying xray monitor exe file. then starting up 
xray server to monitor itself. real test of xray is can it monitor itself

xray your system dlls and always know what applications are doing

could run task manager where window is giant tree map of all processes running on the 
system - everything able to be zoomed in on. complete knowledge of the running system - 
'seeing' the code. app can see itself run

XRAY - can IL code be shown for functions, recompiled and injected into the app
can XRay build a set of dynamic functions that call each other at any time a function can 
be removed, improved, but the app itself is never turned off
<---------


now2
	try to implement timeInfunc recalc,
		determine if functioncall should use direct links to nodes and not ids
	option to show rendering time in debug
	show new metrics in details, sum children, show object type as column
	light up detail selections
	mouse over give more details in certain view modes

now
	show only nodes that have been recently called in called
	position recently called nodes by way of a descending call tree
		switch to show only hit
		size nodes based on half of available area
		give nodes a charge, lines a spring
		methods in same class attract
		edges have magnetism / spring
		nodes attract/repel baseed on relationship

	figure out call graph
		convert to layers
		put entry / ordered exit hooks on each node
		connect hooks
		allow click drag re-order or graph

	show only hit, is showing classes with no methods in them
	details not working when show only hit is on, details of unhit nodes
	real-time search docked on status bar with X to close, like firefox, 
		options to filter or just highlight found nodes
		
	bug - show only hit in test mode
	test - show only hit when zoomed in on unhit

	if calls array near exhausted, make a debug log
		also show number of nodes loaded so i can do mem usage estimates

	thread time graph
		x axis time - moving forward in real time
		y axis each thread
		each function a different color along thread column

	layout
		labels
		spring
		3d option for both, xna treemap, xna 3d spring nodes call map

	legend
		colors
		timing - 1000 us in 1 ms / 1000 ms in 1 s / 60 s in 1 m

	details
		blink green outline when navigated
		clicking on call in list, blinks the link
			show under call dots
			
		hook back/forward buttons up to details
		sorting list view
			
		refresh link at bottom
		sum total time of all calls to functions in higher than method details
		timer updating stats
		if same details window already open use that
		tooltips for list headers, say that this, is this, sum is sum of all times in bottom pane
		
	perf menu or dialog
		can show functions with most hits
		functions wiht most time in side
		functions with most time per hit
		reset option to reset timing on a func
		is call rate another metric??
	
	left/right keys - zoom in/out
		
	look at functions with links that are no longer active
		see if function could have returned without triggering an exit
		test a chain of functions a b c d e f, where f throws, and c catches, test that intermediate calls have been cleared

	tool  strip
		clear filtering withen active
		button when errors in the debug log
		item to draw box around smaller or just a group of functions and zoom in only on that
	
	option to not use windows forms, and late bind test with rpc hookups	
	
	override
		allow user to click view MSIL
		user can edit MSIL
		save, compile and activate override
		override needs to be specified as a compile option
		if override, and new code, then run new code, else run original code
		
		can an entire late bound application be written from scratch inside, c#, later compiled without xray bindings, can xray build itself another xray??
		

	hold down tab or a toggle button to show labels in upper right of functions that can fit the label
	
	when going from spring to tree map view, animate rest of map hiding, and called functions remaining, and moving towards gravity

	recompile mscorlib, and put in same dir as software so my internal one is used instead
		test recompiling mscorlib and rest of .net and having it used locally
			see whole app run, debug into windows libs, use ilasm to inspect code
			partner with the red code to get their disassembler
			disassemble their dissassembler to STEAL their disassembler
				reflector has global method - a$PST06000001
			re-compiled reflector failing to launch

	show array/map sizes in debug
		show in debug settings exe was compiled with 
		
	future 
		people write and modify code as the app runs
			able to override funcs and save result
		people can collaborate and write running software in real time
		full introspection and manipulation of all running objects


goal
	if todo items helps me understand app better then its higher on the list
	ill know its ready when i can xray any app and in a few minutes understand how the app works and is structured
	in my brain coding is visual, i make connections between objects, but in practice i dont code with objects, 
		but text and am forced to imagine the visual which blows your mind the larger the program becomes
	then the 3d shit, go gibson
	Test - SwarmNLP (simple), Paint.Net, RiseOp (straight c#), Wells (VB), Storm (many files mixed code), release/debug
		world wind, WPF, mscorlib, reflector
	testing: investigate how color control works in paint.net
	priorities - external, details, spring, 3d
    totally translucent operating system
    get xray working with webstorm / silverlight
    
xray gui
	right click option to show msil for function, or fields of a class, msil could have hyper links to other functions
	mouse over instance count
	   for green nodes (entry points) display the instance count
	current redraw time / fps
	saving current option set to use between runs
		saves current select/ignore settings, user can label as 'transfer graph' etc..
	show notice somewhere on gui if there are entries in the debug log
	how too zoom in on piddly functions?

springs
	only show hit boxes
	free moving, hanging, the repulse each other
	the less related 2 objects are the more repulsive they are
	opens another with boxes connected by strings
	mirrors treemap window, selections, ignores, etc.. the windows are linked
	maybe use a splitter to the user gets 2 concurrent views
	option to spawn more xray windows so differnt classes can be viewed in diff windows, or trees simultaneously

instance tracking
	option in builder that passes 'this' in function call
	xlib stores 'this' in a weak reference map
	user can right click on node and do view instances which allows viewing all the vars of each instance

bugs 
	these files not building - dragonfly.loki, dragonfly.storm.core, DragonFly.Storm.World.Client, DragonFly.Util.Native, DragonFly.Video.MXF
    mscorlib, system.core, reflector
    
build
	options
		track construction, threads
	progress bar of file ops
	ability to pause tracking in interface
	time how long it takes to do redraw, option to draw less frames, option to set fps, which mods frames/timer settings - option in viz
	
release
	need to take out any storm/wells research refs

advanced
	get to work with dlls, users pick entry function, should make asp tracking work
	xray search box, as letters are typed in, matching function name boxes are bolded
	easter egg - extreme zoom in factal hacker code effect
	 
flow tracking
	when external method is called, add it to a name space and make optional to add the 'borders' tree map
	way to analyze hits to external apis and libraries we didnt compile with
	use moving dots show functions talking, would be cool to use spaces between classes as 'highways'
	draw dependencies along border with moat between actual app

	advantage to having flow tracking on outside is that a->b can be indexed with a unique id
	
	option to hide tree map to just watch flow, mouse over still works to show exactly what functions are hit
		combine with moving blocks in spring view
		
memory tracking
	heap dump tree map ;) can figure out where allocated??
	hash call path to allocated memory
		so we see as a box all strings allocated by a->b->c and its size

function tree map
	how to draw/show anonymous methods
	
	larger xray? these are apps running on your computer as blocks (size by memory, height by cpu) 
		borders are external services - hard drives, network interfaces, sound, display, etc...

sub function tracking
   break every block where there's a branch in msil into it's own node
	  with enter/exit overrides there
   can use normal flow tracking and spring to see how internals of function are operating
	  can't really use names, but can double click code, and the spring org will give a good sense of whats going on
   code coverage stats can be given by tracking hit/unhit blocks
	   shade nodes by percent thats been covered (more red if less covered)
   call lines will come from sub  function of node with-in node
   
3d function tree map
	constant square size, height dependnent on amount of code (cities)
	fly through like hackers
	taller towards middle of box
	load IL and write on the walls of the cube
	black sky
	boxes dark blue semi translucent
	code on walls of box
	code lights up white when function is run
	wsad/mouselook fly through, click highlights selected
	 
	flying white dot cars through program city
	   use 2d xray app to figure out how to generate paths
		  hide everything but methods, and show calls in lanes
			 find shortest path to destination node
  		   start off in direction of node, if hit a wall, chage direction
  		   set height of car based on distance traveling
				 lower = farther, higher = short jumps
     			 color by number of bounaries crossed, class, namespace, 

	 
release 
	open source with donate button
	put donate button in about of app as well,
	link to my page with other projects like rise op, cant hurt


different colors per thread
	each entry instance has an id, could map instance ids to function calls

	6 red orange yellow green blue purple
	black interlace when threads intersect
	array 0 - 5
	map thread id to array index
	every sec, clear map but keep colors as pref if thread checks in, if not pref is cleared

stack planes - size number of instances
	override ctor / deconstructor and add counters
	for now put number inside box
	need to research iso view mapping, wpf display
	if ctor/finalize not found, create it
    
add to xray ability to gen interface from the classes themselves
   work with program directly, manipulate internal variables 
   and inspect those values on the fly
   use try/catch so that iterating exceptions are handled
   or i guess xray would lock object as iterating...

names
	introspective
	introvert c# csharp .net msil
	xray whoami existance
	soul inside translucent window clear
	xray, invisible, MRI
	scan, clearSense, lucent
	glass, inside out
	soul, spirit, ghost, phantom, spectre
	xray.net
	flow, clarity, system, getting a 'sense' 
	seesharp
	
	license
		fair support license
		general public license

editor
	click on blocks, edit code
	f5 launches app and everything starts lighting up
	the end of multiple files for projects
		everything is in one file, accessible by a logical tree
		can find classes/vars quickly by typing the name like itunes
	integrate with visual studio for real editing, post build step to use xray

riseop
	what better platform for interactive building, debugging, version control and comm
	
release
	when i make a page with all my apps, put link to c0re in about of all apps so can link back
	contact .net developers individual tell them ive tried their app and would like their opinion on
		the app, what we could do to help them understand their app better
	also good for professors teaching CS
		find schools using C#/VB.Net for the class and ask could it be used as a teaching tool?
		what features would they wany?
		high level app design, how components communicate
	coming into an unfamiliar project and getting a 'sense' of the code quickly
	make a youtube demo video
 
    A useful PRESENTATION tool for engineers to show management how their systems work and inter-operate
		ever want to explain to your manager how the system works easily?