
now	
	mttq message dispose not being detected in facebook chat?

	ViewPanel
		add back dashes and endcaps
		
		GdiRenderer
		GLRenderer
		rename, start moving rendering into GdiRenderer
			have a Renderer interface
				attach(host panel)
				draw rect, draw text, do render

				copy GLpanel and rename 2dGLRenderer or something like that

		ViewHost panel class override
			
			have init, init gdiRenderer inside

			create gl host, make the ability to switch

			start piping mouse commands up to ViewHost
			bring main Renderer out

			create gl host from scratch

		IRenderer
			OnBeginRender hooks in
			EndRender
			OnMouseMove/down
			DrawRect 
			DrawString
			MeasureString


	click title in instance view - focus on node in view, if zoomed into far, zoom out, or make outside visible
	
	autosize instance cols working	

	build stats - time, dat size
	double click on method in treeview, show containing class
	double click on class in class/init graph, show connected
	switch to class graph from method graph, and move zoom up to class level
	create an obsidian color them
	about tab - code used, licenses, put about panel in builder and viewer

	add last run time to mouse over in threadline

	if fields selected in thread line
		show fields as row at bottom, at mid-point between accessing threads

	Top level thread filter in crumbs - works in all views?
		filter call graph by selected thread
		a way to filter by thread intersections
		way to show what FIELDS are accessed by multiple threads
		3d thread lines - cylinder with threadlines spread around edge, lines go up/down off the screen, mouse rotates cylinder
		call graph, filtered by thread
			add to function call class an int[] for each thread id that used the call
			drop down combo of threads tracked, name is name of entry point
			different colors per thread
		option to turn on/off
		pick 6 colors, take thread.getHash() % 6 to get index of color
		color nodes/lines between nodes according to hash
		save red for nodes/calls hit by multiple colors
		each entry instance has an id, could map instance ids to function calls
		6 red orange yellow green blue purple
		black interlace when threads intersect
		array 0 - 5
		map thread id to array index
		every sec, clear map but keep colors as pref if thread checks in, if not pref is cleared
		sep call graphs per thread, or list of ids, select to show graph for just that

	does 'reset hit' reset class hit status>
	break out color profile for GL

	blend colors so i can see outside calls bettter
	
	better browsing - double click on class to see internal methods (or zoom in on class)
	on click method/node, show that instance view, and select the line with that field

	field value in code view
	links in code view
	search also highlights code/instances
	add method / field dependencies to graph
		add info if method is encapsulated by a try, or parent is (trace if there's anyway for unhandled exceptions)
	
	move covered nodes into view model

	double click focused class go to method view, save view mode in history
	msil view - lots of dupe items in list`1 class
	track internal msil graph
	
	post-build command line to introspex a build in debug mode so dev at any time can start introspex monitor

code paths as a tree
	clickin on node in tree shows subset
	tree shows last run
	there is 'something' here, there a 'code paths' that get run periodically
		how can i define and show these paths, catagorize by time freq?

abstract rendering, openGL (without text for now) / gdi plus / Direct2D later for metro
	rendering interface that can be passed in, cache color brushes/pens
	compare deOps performance because its sloooww
	blend colors in gdi like openGl

draw flat treemap in orthagonal view
	click to select should work well
	load in letter textures and draw labels
	add call graph to opengl flat render
	click object in openGL windows (hit testing, pixel to object)

unit-tests built in
	ability to run funtions manually
	can visually see real code block run and affected code blocks

incorporate sound somehow?

error handling
	try to handle paint.net crashing with xray
	maybe first pass source show's MSIL

self compiling
	put xCompiler in xLib dll
	copy exe/dlls on compile and save markers where source can be read from them
	while xraying dll, show source code directly ripped from source exe/dll
	allow user to modify source
	re-compile exe/dlls
	re-xray compiled exe/dlls
	re-start xray'd exe

openGL
	texture functions with translucent code
	have texture light up when hit
	draw call lines underneath city, rotate world to see underneath

	have name spaces just as blue outlines around class bases
	mouse over highlight

	'towers of code'
		each function is a text on the surface of the wall, that lights up when run
		fields are at the top of towers
		class graph connects towers with lines bewteen

	load IL and write on the walls of the cube
	black sky
	boxes dark blue semi translucent
	code on walls of box
	code lights up white when function is run
	wsad/mouselook fly through, click highlights selected
	 
	flying white dot cars through program city
	   use 2d xray app to figure out how to generate paths
		  hide everything but methods, and show calls in lanes
			 find shortest path to destination node
  		   start off in direction of node, if hit a wall, chage direction
  		   set height of car based on distance traveling
				 lower = farther, higher = short jumps
     			 color by number of bounaries crossed, class, namespace, 

apps
	de-ops
		problem expanding dictionaries keyvalue elements in some classes
	pixelscope
		track instances in pixel scope doesnt work
		can put pixelscope on laptop to analyze with xray?
	openTK
		gives an assembly reference not found on compile

instance view
	clicking on field should highlight in instance grid and vice versa
	ivcryptostream not showing anything still
	hyperlink in instance view to check out base types, etc..
	search on instance page
	ability to modify values
	ability to prevent deleting of references by 'locking' on refresh, keeping list of instances not weak refs
	button to show next/prev page of instances?
	detect cyclic references in instance browser

search box
	show count next to search box for found #, clicking on # filters display to those nodes
	state graph + function graph ( show inter-state calls, and calls between states ) = total program understanding

Graph Direct -> Method map, does not re-add call dashed lines

profile tab
	draw out new visualization
	profile auto refresh

details tab
	clicking on namespace - gives child classes with instance count for each
	class - gives list of fields, and methods by base class
	method - gives timing info
	field - gives value for different instances
	each has links to parents so can surf just through details
	selection box follows

console tab
   run funtions on existing instances manually
   change field values

help tab
	scrolls down
	legend
		show current colors
		let user set diff colors, load/save configs
		standard, matrix
		call graph - red calls/dependent on, blue - converse


Put sub-classses inside parent classes so functions/methods are adacent?


3d hackers
	each class is a building
	align in graph projection
	make the connecting lines roads, with cars as green moving dots
	each layer of the building is method
	layers light up when called

	windows lighting up are running functions
	zooming in on building shows fields/values
	zooming in on function shows code

surf through state
	mouse over function/fields lights up connected functions/fields
	click on function
		top accessed fields and states
	zooms in on class box
	state is sitting right there
	connected functions sitting there

hook calls to edge of node in graph view?

rename field with types to anon classes to new name

option to re-organize classes methods 'processClassNames'

keep track anon/external option or just have it able to turn off on client side?

show what the compiler settinsg were of the app when opened with xray

ability in interface to speedup/slowdown update speed

profiling
	blink green outline when navigated
	clicking on call in list, blinks the link
		show under call dots
			
	hook back/forward buttons up to details
	sorting list view
			
	refresh link at bottom
	sum total time of all calls to functions in higher than method details
	timer updating stats
	if same details window already open use that
	tooltips for list headers, say that this, is this, sum is sum of all times in bottom pane
		
look at functions with links that are no longer active
	see if function could have returned without triggering an exit
	test a chain of functions a b c d e f, where f throws, and c catches, test that intermediate calls have been cleared

override
	user can edit MSIL
	save, compile and activate override
	override needs to be specified as a compile option
	if override, and new code, then run new code, else run original code
	msil could have hyper links to other functions
		
	can an entire late bound application be written from scratch inside, c#, 
	later compiled without xray bindings, can xray build itself another xray??
	
recompile mscorlib, and put in same dir as software so my internal one is used instead
	test recompiling mscorlib and rest of .net and having it used locally


future 
	people write and modify code as the app runs
		able to override funcs and save result
	people can collaborate and write running software in real time
	full introspection and manipulation of all running objects

memory tracking - heap dump tree map 

tracking file system, network access from graph?

sub function tracking
   break every block where there's a branch in msil into it's own node
	  with enter/exit overrides there
   can use normal flow tracking and spring to see how internals of function are operating
	  can't really use names, but can double click code, and the spring org will give a good sense of whats going on
   code coverage stats can be given by tracking hit/unhit blocks
	   shade nodes by percent thats been covered (more red if less covered)
   call lines will come from sub  function of node with-in node
   
future editor
	click on blocks, edit code
	f5 launches app and everything starts lighting up
	the end of multiple files for projects
		everything is in one file, accessible by a logical tree
		can find classes/vars quickly by typing the name like itunes
	integrate with visual studio for real editing, post build step to use xray

remote monitoring dll plugins to webserver
	xray dll mode starts a mini http server embedded in dll
	   serves div pages colered as blocks
	   use javascript to click blocks zoom

	  each dll has an embedded web server that when activated shows
		whats going on in system

	  if running as http then can go into xray mode at will, release with
		xray inside and debug on demand, use a browser on any machine to
		debug your app. go to the xray port
		every second each http listening xray object pings the main port
		   takes it if available, serves as a directory for other xray
		   apps

	when the dll is instantiated an xray server is created
	this starts another server that xray remote can be used on
	periodically the remote client sends a compressed bitfield of hit functions

	
system xray converter
	scan system for .net exe's and dlls
	recompile all with xray
	when anything starts up it finds the running xray process and gives it a handle to be hooked into whenever

future
	---X-Ray
	  if xrayed application detects ctrl alt x, current
		app gui is frozen, and xray for app fades over.
	  do for silverlight app as well
		debug interfaces as you build them
		if function doesnt work, fix it in real time
		  so next click doesnt call an exception, but does something.

	  each piece of the app compiles independently
		the code is compiled as the program runs
		  each step fleshing out the program

	GOAL: USE X RAY TO BUILD AN ENTIRE APPLICATION WITHOUT CLOSING 
	IT!!!  Debugging, error checking as new components added. 
	Actual program never closed.
	Taking out one component could cause a whole mesh of components 
	to fail, but never the whole system, always a ROOT component to 
	start from again.  add function, write in C#, compile and 
	attach at runtime inside.  not called directly but wrapped 
	around a component layer that pipes in/out variable 
	input/outputs

	root component is a loop always starting to try starting the 
	first attached components.

	the root component never stops.

	interactive application can be built and never closed. a 
	webserver or 'free' project where people can build components 
	and attach.  links between components could even be over the 
	network.

	might already exist 'in functional' programming. but this is 
	higher level.  the nucleus is procedural.  while the program 
	build on procedural parts is acts functional.
	-----


	>-------
	IF ALL APPS/DLLS xrayed on system, can view 'insides' of any running process at any time. 

	 when not viewed - full speed, when viewed - html page updtating - 

	http://127.0.0.1:34234:XRay/c/program files/myapp.dll

	entry function checks if xray server up, if not inits it, if entry function already has a 
	version then create a new one
	xray server can be queried for all active running xray instances on the system

	xray instances themselves can be check by xraying xray monitor exe file. then starting up 
	xray server to monitor itself. real test of xray is can it monitor itself

	xray your system dlls and always know what applications are doing

	could run task manager where window is giant tree map of all processes running on the 
	system - everything able to be zoomed in on. complete knowledge of the running system - 
	'seeing' the code. app can see itself run

	XRAY - can IL code be shown for functions, recompiled and injected into the app
	can XRay build a set of dynamic functions that call each other at any time a function can 
	be removed, improved, but the app itself is never turned off
	<---------
